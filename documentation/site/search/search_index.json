{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"InternetRelayCat","text":"<p>If any issues are encountered, or you cannot find something here, please consult the raw version of the documentation.</p> <p>looky here</p>"},{"location":"algos/","title":"Algorithms and Modelling","text":""},{"location":"algos/#structure-chart","title":"Structure Chart","text":""},{"location":"algos/#notation","title":"Notation","text":"<ul> <li>Keywords are capitalised.</li> <li>Subroutines in the code are underlined.</li> <li>Subroutines from an external source (i.e. the C++ standard library, FTXUI, or tomlplusplus) are italicised.</li> <li>Subroutine definitions are bold and underlined</li> <li>Notation for indexing uses square brackets, and literal strings are denoted with quotation marks</li> </ul>"},{"location":"algos/#pseudocode","title":"Pseudocode","text":"<pre>\n\nBEGIN MAINPROGRAM  \n    INITIALISATION  \n        set handler to handler-constructor   \n        set colour-theme to handler.config.theme  \n        set screen to interactive-fullscreen-constructor  \n        set UI elements to default states  \n    END INITIALISATION  \n    WHILE running\n        render-elements  \n        CASEWHERE catch-event is  \n            carriage return : send-message (message-content)  \n            mousewheel up :   \n                IF scroll-amount is not lowest THEN  \n                    decrease scroll-amount  \n                ENDIF  \n            mousewheel down :   \n                IF scroll-amount is not highest THEN  \n                    increase scroll-amount  \n                ENDIF  \n            escape : quit program  \n        ENDCASE  \n        IF poll-for-messages returns true THEN  \n            receive-messages  \n            refresh-screen  \n        ENDIF  \n    ENDWHILE\nEND MAINPROGRAM  \n\nBEGIN SUBPROGRAM handler-constructor  \n    INITIALISATION  \n        set config to config-constructor  \n        set user to config.users[default-user]  \n        set server to config.server[default-server]  \n        set server-ip to convert to useable type (server.ip-address)  \n        set server-socket to socket-constructor (IPV4, TCP-socket, any, 6667, server-ip)  \n        set socket-file-descriptor to server-socket.get-socket-fd  \n    END INITIALISATION  \n    set socket to non-blocking (socket-file-descriptor)  \n    send-message (nick command)  \n    send-message (user command)  \nEND SUBPROGRAM handler-constructor  \n\nBEGIN SUBPROGRAM config-constructor  \n    INITIALISATION  \n        IF config file doesn't exist THEN  \n            create config file with defaults  \n        ENDIF  \n        set config-location to get home directory/.config/ircat/config/toml  \n    END INITIALISATION  \n    set config to parse toml file  \nEND SUBPROGRAM config-constructor  \n\nBEGIN SUBPROGRAM socket-constructor (address-family, socket-type,  \n                                            protocol, port, ip-address)  \n    INITIALISATION  \n        set member values to parameters  \n    END INITIALISATION  \n    IF set socket-file-descriptor to socket (family, socket-type, protocol) returns an error THEN  \n        print error-message  \n    ENDIF  \n    IF socket-purpose is binding THEN  \n        set socket option (reuse address, true)  \n        bind socket   \n    ELSE   \n        connect socket  \n    ENDIF  \nEND SUBPROGRAM socket-constructor  \n\nBEGIN SUBPROGRAM send-message (content)  \n    set bytes-sent to 0  \n    set total-sent to 0  \n    set length to length of content  \n    WHILE total-sent &lt; length  \n        send (content)  \n        set bytes-sent to return value of send  \n        set total-sent to total-sent + bytes-sent  \n    ENDWHILE  \nEND SUBPROGRAM send-message  \n\nBEGIN SUBPROGRAM poll-for-messages  \n    set events-count to poll (socket-file-descriptor)  \n    IF events-count &gt; 0 THEN  \n        append receive-messages to messages  \n        return true  \n    ENDIF  \nEND SUBPROGRAM poll-for-messages  \n\nBEGIN SUBPROGRAM receive-messages  \n    set buffer to array of 2048 characters  \n    set bytes-received to 0  \n    set messages to empty vector of strings  \n    set parsed-messages to empty vector of irc-messages   \n    recv (socket-file-descriptor, buffer)  \n    set bytes-received to return value of recv  \n    WHILE there are carriage returns in buffer   \n        append a slice of the buffer from the start until the next carriage return to messages  \n        remove that slice of the buffer including the carriage return  \n    ENDWHILE  \n    FOR message IN messages   \n        append parse-message (message) to parsed-messsages  \n    ENDFOR  \n    return parsed-messages  \nEND SUBPROGRAM receive-messages  \n\nBEGIN SUBPROGRAM parse-message (message)  \n    set trailing to empty string  \n    set result to empty irc-message  \n    IF message size &lt; 1 THEN  \n        return result  \n    ENDIF  \n    IF message[0] is a \":\" THEN  \n        set result.prefix to the slice of message between 1 and the first space  \n        remove that slice from message  \n    ENDIF  \n    set result.command to the slice of message from the start until the first space  \n    remove that slice from message  \n    IF message contains \" :\" THEN  \n        set trailing to the slice of message from after \" :\" until the end  \n        remove that slice from message  \n    ENDIF  \n    WHILE there are spaces in message  \n        append the slice of message from the start until the first space to result.params  \n        remove that slice from message  \n    ENDWHILE  \n    IF there are still characters in message THEN  \n        append message to result.params  \n    ENDIF  \n    append trailinig to result.params  \n    return result  \nEND SUBPROGRAM parse-message   \n\nBEGIN SUBPROGRAM render-elements  \n    set message-box to horizontal box (individual-components)\n    set components to vertical box (message-box)\n    render (render-messages)\n    render (components)\nEND SUBPROGRAM render-elements  \n\nBEGIN SUBPROGRAM render-messages  \n    set rendered to vector of elements\n    FOR message in messages\n        append vertical box (separator-bar, message.prefix, msg.params[last]) to rendered\n    ENDFOR\n    return rendered\nEND SUBPROGRAM render-messages  \n\n</pre>"}]}